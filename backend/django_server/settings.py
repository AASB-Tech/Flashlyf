"""
Django settings for django_server project.

Generated by "django-admin startproject" using Django 4.2.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

from django.core.management.commands.runserver import Command as runserver
from corsheaders.defaults import default_headers
from corsheaders.defaults import default_methods
from pathlib import Path
import os
import dj_database_url
import redis
from celery.schedules import crontab
from dotenv import load_dotenv
load_dotenv()

if os.getenv("STAGE") == "production":
    BASE_URL = "https://" + os.getenv("DOMAIN")
    DEBUG = False
    SOCIAL_AUTH_REDIRECT_IS_HTTPS = True
    GOOGLE_ANALYTICS_ID = ""
    FACEBOOK_PIXEL_ID = ""
elif os.getenv("STAGE") == "development":
    runserver.default_addr = os.getenv("DOMAIN")
    runserver.default_port = os.getenv("PORT")
    BASE_URL = "http://" + \
        os.getenv("DOMAIN") + ":" + os.getenv("PORT")
    DEBUG = True # SECURITY WARNING: don't run with debug turned on in production!
    SOCIAL_AUTH_REDIRECT_IS_HTTPS = False
    GOOGLE_ANALYTICS_ID = ""
    FACEBOOK_PIXEL_ID = ""

# Build paths inside the project like this: BASE_DIR / "subdir".
BASE_DIR = Path(__file__).resolve().parent.parent
MEDIA_ROOT = os.path.join(BASE_DIR, "media")
MEDIA_URL = f"{BASE_URL}/media/"
DEFAULT_FILE_STORAGE = "django.core.files.storage.FileSystemStorage"

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
# Used for signing and hashing cookies and session secrets
SECRET_KEY = os.getenv("SESSION_SECRET")

LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "handlers": {
        "file": {
            "class": "logging.handlers.WatchedFileHandler",
            "filename": os.path.join(BASE_DIR, "logs/django_server_logfile.log"),
        },
    },
    "loggers": {
        "django": {
            "handlers": ["file"],
            "level": "INFO",
        },
    },
}

# Honor the 'X-Forwarded-Proto' header for request.is_secure()
SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')
if os.getenv("STAGE") == "production":
    ALLOWED_HOSTS = [
            f"https://{os.getenv('DOMAIN')}",
            os.getenv('DOMAIN'),
            os.getenv("FRONTEND_HOST"),
            # "http://localhost",
            # "http://localhost:3000",
            # "http://localhost:8000",
            # "0.0.0.0",
            # "127.0.0.1", 
        ]
elif os.getenv("STAGE") == "development":
        ALLOWED_HOSTS = ["*"]

APPEND_SLASH = False

# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "django_extensions",
    "corsheaders",
    "django_celery_beat",
    "api",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "corsheaders.middleware.CorsMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

REST_FRAMEWORK = {
    "DEFAULT_RENDERER_CLASSES": [
        "api.renderers.FlashLyfJSONRenderer", 
        #"rest_framework.renderers.BrowsableAPIRenderer",
    ],
    "EXCEPTION_HANDLER" : "api.exception_handler.flashlyf_exception_handler",
    "DEFAULT_AUTHENTICATION_CLASSES": [
        "rest_framework.authentication.SessionAuthentication",
    ],
    "DEFAULT_PROXY_HEADERS": {
        "HTTP_X_FORWARDED_FOR": "X_FORWARDED_FOR",
    },
    # "DEFAULT_PERMISSION_CLASSES": [
    #     "rest_framework.permissions.IsAuthenticatedOrReadOnly",
    #     "rest_framework.permissions.DjangoModelPermissions"
    # ]
}

# CORS settings
CORS_ORIGIN_ALLOW_ALL = False
CORS_ALLOW_CREDENTIALS = True
CORS_ALLOW_METHODS = (
    *default_methods,
    "HEAD",
)

CORS_ALLOW_HEADERS = (
    *default_headers,
    "accept-encoding",
    "Content-Encoding",
    "dnt",
    "origin",
    "user-agent",
    "x-api-user",
    "x-api-key",
    "x-client"
)
CORS_EXPOSE_HEADERS = (
    "X-RateLimit-Limit",
    "X-RateLimit-Remaining",
    "X-RateLimit-Reset",
    "Retry-After"
)
read_only = ()
read_write = (
    os.getenv('FRONTEND_HOST'),
    f"https://{os.getenv('DOMAIN')}",
    f"{os.getenv('FRONTEND_HOST')}:{os.getenv('FRONTEND_PORT')}",
)
CORS_ALLOWED_ORIGINS = (
    # *read_only,
    # *read_write
    os.getenv('FRONTEND_HOST'),
    f"https://{os.getenv('DOMAIN')}",
    f"{os.getenv('FRONTEND_HOST')}:{os.getenv('FRONTEND_PORT')}",
)
CSRF_TRUSTED_ORIGINS = (
    # *read_write,
    os.getenv('FRONTEND_HOST'),
    f"https://{os.getenv('DOMAIN')}",
    f"{os.getenv('FRONTEND_HOST')}:{os.getenv('FRONTEND_PORT')}",
)

ROOT_URLCONF = 'django_server.urls'

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = 'django_server.wsgi.application'

# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field
DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"
if os.getenv("STAGE") == "production":
    DATABASE_URL = os.getenv("DATABASE_URL")
    DATABASES = {}
    DATABASES['default'] = dj_database_url.config(default=DATABASE_URL, conn_max_age=600, ssl_require=True)
elif os.getenv("STAGE") == "development":
    DATABASES = {
        "default": {
            "ENGINE": "django.db.backends.postgresql_psycopg2",
            "NAME": os.getenv("POSTGRES_DB"),
            "USER": os.getenv("POSTGRES_USER"),
            "PASSWORD": os.getenv("POSTGRES_PASSWORD"),
            "HOST": os.getenv("PG_HOST"),
            "PORT": os.getenv("PG_PORT"),
            "CONN_MAX_AGE": 600
        },
        'test' : {
            "ENGINE": "django.db.backends.postgresql_psycopg2",
            "NAME": os.getenv("POSTGRES_DB"),
            "USER": os.getenv("POSTGRES_USER"),
            "PASSWORD": os.getenv("POSTGRES_PASSWORD"),
            "HOST": os.getenv("PG_HOST"),
            "PORT": os.getenv("PG_PORT"),
            "CONN_MAX_AGE": 600
        }
    }

# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.sqlite3',
#         'NAME': BASE_DIR / 'flashlyf_db.sqlite3'
#     },
#     "test": {
#         "ENGINE": "django.db.backends.sqlite3",
#         'NAME': BASE_DIR / 'flashlyf_testdb.sqlite3'
#     }
# }

TEST_NAME = 'test'

# Redis Config
REDIS_HOST = os.getenv("REDIS_HOST")
REDIS_PORT = os.getenv("REDIS_PORT")

REDIS_CLIENT = redis.Redis(host=REDIS_HOST, port=REDIS_PORT, db=0)

# Cache Config with Redis
if os.getenv("STAGE") == "production":
    CACHES = {
        "default": {
            "BACKEND": "django_redis.cache.RedisCache",
            "LOCATION": os.environ.get('REDIS_URL'),
            "OPTIONS": {
                "CLIENT_CLASS": "django_redis.client.DefaultClient",
                # "CONNECTION_POOL_KWARGS": {
                #     "ssl_cert_reqs": None
                # },
            }
        }
    }
elif os.getenv("STAGE") == "development":
    CACHES = {
        "default": {
            "BACKEND": "django_redis.cache.RedisCache",
            "LOCATION": f"redis://{REDIS_HOST}:{REDIS_PORT}/0",
            "OPTIONS": {
                "CLIENT_CLASS": "django_redis.client.DefaultClient",
            }
        }
    } 
    
# Add Celery configuration
CELERY_BROKER_URL = f"redis://{REDIS_HOST}:{REDIS_PORT}/0"
CELERY_RESULT_BACKEND = f"redis://{REDIS_HOST}:{REDIS_PORT}/0"
CELERY_BIN="/usr/local/bin/celery"
CELERY_TASK_ALWAYS_EAGER = False # If set to to true celery will run tasks synchronously.
# Celery task scheduler
CELERY_BEAT_SCHEDULE = {
    'delete_expired_posts': {
        'task': 'api.tasks.delete_expired_posts',
        'schedule': crontab(minute='*/3') #random.randint(60, 180),  # Schedule the task to run randomly between every 1 and 3 minutes.
    },
}
    
# Session Config (sessions are stored in Redis)
SESSION_ENGINE = "django.contrib.sessions.backends.cache"
SESSION_CACHE_ALIAS = "default"
SESSION_COOKIE_NAME = "sessionid"
SESSION_COOKIE_AGE = 604800 # 1 week in seconds 
SESSION_COOKIE_PATH = "/"
SESSION_COOKIE_HTTPONLY = True # client-side JavaScript will not be able to access the session cookie.
SESSION_COOKIE_SAMESITE = 'Lax' #Default: "Lax"
SESSION_EXPIRE_AT_BROWSER_CLOSE = False # Wether the session is deleted when the browser is closed
SESSION_SAVE_EVERY_REQUEST = False # if False session data will only be saved if it has been modified
# CSRF Config
CSRF_COOKIE_NAME = "csrftoken"
CSRF_USE_SESSIONS = False #if True CSRF tokens will be saved in the session cookie
CSRF_COOKIE_HTTPONLY = False # client-side Javascript can read the csrf cookie
CSRF_COOKIE_SAMESITE = 'Lax'
CSRF_HEADER_NAME = "HTTP_X_CSRFTOKEN" # The name of the request header used for CSRF authentication.
if os.getenv("STAGE") == "production":
    SESSION_COOKIE_SECURE = True  # Send cookie over HTTPS only
    CSRF_COOKIE_SECURE = True # Send csrf cookie over HTTPS only
    SESSION_COOKIE_DOMAIN = 'flashlyf.com'
    CSRF_COOKIE_DOMAIN = 'flashlyf.com'
elif os.getenv("STAGE") == "development":
    SESSION_COOKIE_SECURE = False  
    CSRF_COOKIE_SECURE = False 
    SESSION_COOKIE_DOMAIN = '.localhost'
    CSRF_COOKIE_DOMAIN = '.localhost'

AUTH_USER_MODEL = "api.User"
AUTHENTICATION_BACKENDS = [
    "api.backends.CustomUserModelBackend", 
    "django.contrib.auth.backends.ModelBackend"
]



# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]

# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = "en-us"
TIME_ZONE = "UTC"
USE_I18N = True
USE_L10N = True
USE_TZ = True
FIRST_DAY_OF_WEEK = 1 # Monday

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = "static/"


