version: '3.8'

services:

  # DJANGO
  flashlyf-backend-dev:
    image: flashlyf-backend-dev
    container_name: flashlyf-backend-dev
    build:
        context: ./backend
        target: development
    env_file:
        - backend/.env
        - postgresql/.env
    restart: always
    expose: 
      - 8000
    ports:
      - '8000:8000'
    networks:
      - flashlyf-network-dev
    depends_on:
      - flashlyf-pg-db
      - flashlyf-redis-db
    volumes:
      - ./backend:/backend:z  # This allows for realtime changes to be effective

  # NEXTJS frontend website
  flashlyf-frontend-dev:
    container_name: flashlyf-frontend-dev
    build:
      context: ./frontend_web
      target: development
    env_file:
        - frontend_web/.env
    restart: always
    image: flashlyf-frontend-dev
    expose: 
      - 3000
    ports:
      - '3000:3000'
    networks:
      - flashlyf-network-dev
    volumes:
      - ./frontend_web:/frontend_web  # Mount the local code directory as a volume, for Hot reloading

  # POSTGRES
  flashlyf-pg-db:
    container_name: flashlyf-pg-db-dev
    image: postgres:14-alpine  
    restart: always
    env_file:
        - postgresql/.env
    expose: 
      - 5432
    ports:
      - "5432:5432"  
    networks:
      - flashlyf-network-dev
    volumes:
      - flashlyf-storage-dev:/var/lib/postgresql/data 
      - ./postgresql:/docker-entrypoint-initdb.d # Init script for database

  # REDIS
  flashlyf-redis-db:
    container_name: flashlyf-redis-db-dev
    image: redis:7-alpine  
    restart: always
    command: redis-server --save 20 1 --loglevel warning
    expose: 
      - 6379
    ports:
      - '6379:6379'
    networks:
      - flashlyf-network-dev
    volumes: 
      - flashlyf-storage-dev:/redis-data

  # Celery 'background' worker for Django
  # flashlyf-celery-worker:
  #     command: sh -c "wait-for flashlyf-redis-db:6379 && wait-for flashlyf-backend-dev:8000 -- celery -A django_server worker --loglevel=info"
  #     #container_name: flashlyf-celery-worker  
  #     env_file:
  #       - backend/.env
  #       - postgresql/.env
  #     depends_on:
  #       - flashlyf-backend-dev
  #       - flashlyf-redis-db
  #     deploy:
  #       replicas: 2
  #       restart_policy:
  #         condition: on-failure
  #       resources:
  #         limits:
  #           cpus: '0.50'
  #           memory: 50M
  #         reservations:
  #           cpus: '0.25'
  #           memory: 20M
  #     #hostname: celery-worker
  #     image: flashlyf-backend-dev
  #     networks:
  #       - flashlyf-network-dev
  #     restart: on-failure

  # # Celery task scheduler for Django
  # flashlyf-celery-beat:
  #   command: sh -c "wait-for flashlyf-redis-db:6379 && wait-for flashlyf-backend-dev:8000 -- celery -A django_server.celery beat --loglevel=info --scheduler django_celery_beat.schedulers:DatabaseScheduler"
  #   env_file:
  #     - backend/.env
  #     - postgresql/.env
  #   #container_name: flashlyf-celery-beat-dev
  #   depends_on:
  #     - flashlyf-backend-dev
  #     - flashlyf-redis-db
  #   #hostname: celery-beat
  #   image: flashlyf-backend-dev
  #   networks:
  #     - flashlyf-network-dev
  #   restart: on-failure

# NGINX reverse-proxy load balancing webserver
  flashlyf-nginx-dev:
    container_name: flashlyf-nginx-dev
    build:
      context: ./nginx
      target: development
    restart: always
    ports:
    - '80:80'
    networks:
      - flashlyf-network-dev

volumes:
  flashlyf-storage-dev:
    driver: local

networks:
  flashlyf-network-dev:
    driver: bridge
